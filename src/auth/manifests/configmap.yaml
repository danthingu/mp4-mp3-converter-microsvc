# Data Sensitivity: ConfigMaps are used to store non-sensitive configuration data, such as environment variables, 
# command-line arguments, and configuration files, while Secrets are used to store sensitive information, 
# such as passwords, tokens, and private keys.

# Data Encoding: ConfigMaps store data in plain text, while Secrets are encoded or encrypted, 
# providing an additional layer of security. Secrets can be used to store binary data as well as plain text.

# Access Control: ConfigMaps are intended for use by multiple containers or pods within a cluster 
# and can be accessed by any pod with the appropriate permissions. Secrets, on the other hand, are intended to be used 
# by a single pod or container, and access to them is restricted to the pods that require them.

# Storage Location: ConfigMaps and Secrets are stored in different locations in Kubernetes. 
# ConfigMaps are stored in etcd, the distributed key-value store used by Kubernetes, 
# while Secrets are stored in a tmpfs file system that is only accessible to the nodes where the pods using them are running.

# Management: ConfigMaps and Secrets can be managed using the Kubernetes API or the kubectl command-line tool. 
# However, Secrets require additional steps to create and manage due to their sensitive nature.
# For example, Secrets should be encrypted before they are created, and the encryption keys must be carefully managed.

apiVersion: v1
kind: ConfigMap
metadata:
  name: auth-configmap
data:
  MYSQL_HOST: mysql
  MYSQL_USER: auth_user
  MYSQL_DB: auth
  MYSQL_PORT: "3306"
